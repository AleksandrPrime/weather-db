{"version":3,"sources":["components/weather-header/index.js","components/weather-header/weather-header.js","components/weather-list-item/index.js","components/weather-list-item/weather-list-item.js","utils/compose.js","components/weatherstore-service-context/weatherstore-service-context.js","components/hoc/with-weatherstore-service.js","actions/index.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/weather-list/weather-list.js","components/weather-list/index.js","components/input-form/input-form.js","components/input-form/index.js","components/pages/home-page.js","components/app/index.js","components/app/app.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","reducers/index.js","store.js","index.js","services/weather-services.js"],"names":["WeatherHeader","className","to","WeatherListListItem","item","main","temp","temp_max","temp_min","dt_txt","substring","compose","funcs","comp","reduceRight","wrapper","f","React","createContext","WeatherstoreServiceProvider","Provider","WeatherstoreServiceConsumer","Consumer","withWeatherstoreService","Wrapped","props","weatherstoreService","fetchWeather","bookstoreService","city","dispatch","type","weatherBalloon","then","data","payload","catch","err","Spinner","ErrorIndicator","WeatherList","weather","settings","name","list","map","idx","key","dt","WeatherListContainer","this","loading","error","console","log","dots","infinite","speed","slidesToShow","slidesToScroll","Component","connect","bindActionCreators","InputForm","state","label","onLabelChange","e","setState","capitalize","target","value","s","toUpperCase","slice","onSubmit","preventDefault","onChange","placeholder","HomePage","App","role","path","component","exact","ErrorBoundry","hasError","children","reducer","action","undefined","store","createStore","applyMiddleware","thunkMiddleware","_apiBase","_apiId","_prourl","_units","cityName","res","fetch","resp","json","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.f132f372.chunk.js","sourcesContent":["import WeatherHeader from './weather-header';\r\n\r\nexport default WeatherHeader;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './weather-header.css';\r\n\r\nconst WeatherHeader = () => {\r\n    return (\r\n        <header className=\"weather-header row\">\r\n            <Link to=\"/\">\r\n                <div className=\"logo text-dark\">Weather-db</div>\r\n            </Link>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default WeatherHeader;","import WeatherListListItem from './weather-list-item';\r\n\r\nexport default WeatherListListItem;","import React from 'react';\r\nimport './weather-list-item.css'\r\n\r\nconst WeatherListListItem = ({ item }) => {\r\n    const { main: {temp, temp_max, temp_min}, dt_txt} = item;\r\n    return (\r\n        <div className=\"book-list-item list-group\">\r\n            <ul className=\"list-group\">\r\n                <li className=\"list-group-item\">Temp: {temp} C&deg;</li>\r\n                <li className=\"list-group-item\">Max. Temp: {temp_max} C&deg;</li>\r\n                <li className=\"list-group-item\">Min. Temp: {temp_min} C&deg;</li>\r\n                <li className=\"list-group-item\">Date: {dt_txt.substring(0,10)}</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default WeatherListListItem;\r\n","const compose = (...funcs) => (comp) => {\r\n    return funcs.reduceRight(\r\n        (wrapper, f) => f(wrapper), comp);\r\n};\r\n\r\nexport default compose;","import React from 'react';\r\n\r\nconst {\r\n    Provider: WeatherstoreServiceProvider,\r\n    Consumer: WeatherstoreServiceConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    WeatherstoreServiceProvider,\r\n    WeatherstoreServiceConsumer\r\n}","import React from 'react';\r\nimport { WeatherstoreServiceConsumer } from '../weatherstore-service-context';\r\n\r\nconst withWeatherstoreService = () => (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <WeatherstoreServiceConsumer>\r\n                {\r\n                    (weatherstoreService) => {\r\n                        return (<Wrapped {...props}\r\n                                         weatherstoreService={weatherstoreService}/>)\r\n                    }\r\n                }\r\n            </WeatherstoreServiceConsumer>\r\n        );\r\n    }\r\n};\r\n\r\nexport default withWeatherstoreService;","const weatherLoaded = (newWeather) => {\r\n    return {\r\n        type: 'FETCH_WEATHER_SUCCESS',\r\n        payload: newWeather\r\n    };\r\n};\r\n\r\nconst weatherRequested = () => {\r\n    return {\r\n        type: 'FETCH_WEATHER_REQUEST'\r\n    }\r\n};\r\n\r\nconst weatherError = (error) => {\r\n    return {\r\n        type: 'FETCH_WEATHER_FAILURE',\r\n        payload: error\r\n    }\r\n};\r\n\r\n\r\n\r\nconst fetchWeather = (bookstoreService) => (city) => (dispatch) => {\r\n    dispatch(weatherRequested());\r\n    bookstoreService.weatherBalloon(city)\r\n        .then((data) => dispatch(weatherLoaded(data)))\r\n        .catch((err) => dispatch(weatherError(err)));\r\n};\r\n\r\nexport {\r\n    fetchWeather,\r\n}","import Spinner from './spinner';\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return <div>loading...</div>\r\n};\r\n\r\nexport default Spinner;","import ErrorIndicator from './error-indicator';\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\nimport './error-indicator.css';\r\n\r\nconst ErrorIndicator = () => {\r\n    return <div>Error!</div>\r\n};\r\n\r\nexport default ErrorIndicator;","import React, { Component } from 'react';\r\nimport WeatherListListItem from '../weather-list-item';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from '../../utils'\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { withWeatherstoreService } from '../hoc';\r\nimport { fetchWeather } from '../../actions';\r\nimport './weather-list.css'\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nconst WeatherList = ({ weather, settings }) => {\r\n    return (\r\n        <div>\r\n            <h2 className=\"center-block text-center\">{weather.city.name}</h2>\r\n        <Slider {...settings} className=\"weather-list row\">\r\n            {\r\n                weather.list.map((item, idx) => {\r\n                    if (idx % 8 === 0)\r\n                    {return (\r\n                        <div className=\"center-block\" key={item.dt}>\r\n                            <WeatherListListItem\r\n                                item={item}/>\r\n                        </div>\r\n\r\n                    )}\r\n                    return null\r\n                })\r\n            }\r\n        </Slider>\r\n        </div>\r\n    );\r\n};\r\n\r\nclass WeatherListContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchWeather();\r\n    }\r\n\r\n    render() {\r\n\r\n        var settings = {\r\n            dots: true,\r\n            infinite: true,\r\n            speed: 500,\r\n            slidesToShow: 1,\r\n            slidesToScroll: 1\r\n        };\r\n\r\n        const { weather, loading, error } = this.props;\r\n\r\n        if(loading) {\r\n            return <Spinner/>;\r\n        }\r\n\r\n        if(error) {\r\n            return <ErrorIndicator />;\r\n        }\r\n        console.log(weather);\r\n        return <WeatherList weather={weather} settings={settings}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ weather, loading, error }) => {\r\n    return { weather, loading, error };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, { weatherstoreService }) => {\r\n    return bindActionCreators({\r\n        fetchWeather: fetchWeather(weatherstoreService)\r\n    }, dispatch)\r\n};\r\n\r\nexport default compose(\r\n    withWeatherstoreService(),\r\n    connect(mapStateToProps, mapDispatchToProps))(WeatherListContainer);","import WeatherList from './weather-list';\r\n\r\nexport default WeatherList;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from '../../utils'\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { withWeatherstoreService } from '../hoc';\r\nimport { fetchWeather } from '../../actions';\r\n\r\nimport './input-form.css'\r\n\r\n\r\nclass InputForm extends Component{\r\n\r\n    state = {\r\n        label: ''\r\n    };\r\n\r\n    onLabelChange=(e)=>{\r\n        this.setState({label: this.capitalize(e.target.value)})\r\n    };\r\n\r\n    capitalize = (s) => {\r\n        return s && s[0].toUpperCase() + s.slice(1);\r\n    };\r\n    onSubmit = (e) => {\r\n        if(this.state.label){\r\n            this.props.fetchWeather(this.state.label);\r\n            e.preventDefault();\r\n            this.setState({label: ''});\r\n        } else e.preventDefault();\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <form className=\"item-add-form d-flex\"\r\n                  onSubmit={this.onSubmit}>\r\n                <input type=\"text\"\r\n                       className=\"form-control\"\r\n                       onChange={this.onLabelChange}\r\n                       placeholder=\"Enter the name of the city\"\r\n                       value={this.state.label}/>\r\n                <button className=\"btn btn-outline-secondary\">\r\n                    Show the weather\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = ({ weather, loading, error }) => {\r\n    return { weather, loading, error };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, { weatherstoreService }) => {\r\n    return bindActionCreators({\r\n        fetchWeather: fetchWeather(weatherstoreService)\r\n    }, dispatch)\r\n};\r\n\r\nexport default compose(\r\n    withWeatherstoreService(),\r\n    connect(mapStateToProps, mapDispatchToProps))(InputForm)","import InputForm from './input-form'\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport WeatherList from '../weather-list';\r\nimport InputForm from '../input-form';\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div>\r\n            <InputForm />\r\n            <WeatherList />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HomePage;","import App from './app'\r\n\r\nexport default App;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './app.css';\r\nimport WeatherHeader from '../weather-header';\r\nimport HomePage from '../pages/home-page';\r\n\r\nconst App = () => {\r\n    return (\r\n        <main role=\"main\" className=\"container\">\r\n            <WeatherHeader />\r\n            <Switch>\r\n                <Route path=\"/\"\r\n                component={HomePage}\r\n                exact/>\r\n            </Switch>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default App;","import ErrorBoundry from './error-boundry';\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nexport default class ErrorBoundry extends Component{\r\n\r\n    state = {\r\n        hasError: false\r\n    };\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            hasError: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <ErrorIndicator/>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n};\r\n","\r\nconst reducer = (state, action) => {\r\n    if (state === undefined) {\r\n        return {\r\n            weather: [],\r\n            loading: true,\r\n            error: null,\r\n        }\r\n    }\r\n\r\n    switch (action.type){\r\n        case 'FETCH_WEATHER_REQUEST':\r\n            return {\r\n                weather: [],\r\n                loading: true,\r\n                error: null\r\n            };\r\n        case 'FETCH_WEATHER_SUCCESS':\r\n            return {\r\n                weather: action.payload,\r\n                loading: false,\r\n                error: null\r\n            };\r\n        case 'FETCH_WEATHER_FAILURE':\r\n            return {\r\n                weather: [],\r\n                loading: false,\r\n                error: action.payload\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default reducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer, applyMiddleware(\r\n    thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nimport App from './components/app';\nimport ErrorBoundry from './components/error-boundry';\nimport WeatherServices from './services/weather-services';\nimport { WeatherstoreServiceProvider } from './components/weatherstore-service-context';\n\nimport store from './store';\n\nconst weatherstoreService = new WeatherServices();\n\nReactDOM.render(\n    <Provider store={store}>\n        <ErrorBoundry>\n            <WeatherstoreServiceProvider value={weatherstoreService}>\n                <Router basename=\"weather-db/build\">\n                    <App/>\n                </Router>\n            </WeatherstoreServiceProvider>\n        </ErrorBoundry>\n    </Provider>,\n    document.getElementById('root')\n);","export default class WeatherServices {\r\n    _apiBase = 'api.openweathermap.org/data/2.5/forecast?q=';\r\n    _apiId = '&appid=68c24b19a0f082eb5868d192ef1bc194';\r\n    _prourl = 'https://cors-anywhere.herokuapp.com/';\r\n    _units = '&units=metric';\r\n\r\n    weatherBalloon = ( cityName = 'Sevastopol' ) => {\r\n        const res = fetch(`${this._prourl}${this._apiBase}${cityName}${this._apiId}${this._units}`)\r\n            .then((resp) => resp.json())\r\n            .catch(function() {\r\n                // catch any errors\r\n            });\r\n        return res\r\n    }\r\n\r\n}\r\n\r\n//const wea = new WeatherServices();\r\n//console.log(wea.weatherBalloon('Sevastopol'));"],"sourceRoot":""}